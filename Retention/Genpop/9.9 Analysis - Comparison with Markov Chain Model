{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d27daf6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# general\n",
    "import boto3\n",
    "import datetime as dt\n",
    "import json\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import snowflake.connector"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "38dbeee3",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_rows', 1000)\n",
    "pd.set_option('display.max_columns', 1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4c2c43b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.display.float_format = '{:,.2f}'.format"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7efa50c9",
   "metadata": {},
   "source": [
    "### 0 Read Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6795a194",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages/boto3/compat.py:88: PythonDeprecationWarning: Boto3 will no longer support Python 3.6 starting May 30, 2022. To continue receiving service updates, bug fixes, and security updates please upgrade to Python 3.7 or later. More information can be found here: https://aws.amazon.com/blogs/developer/python-support-policy-updates-for-aws-sdks-and-tools/\n",
      "  warnings.warn(warning, PythonDeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "from abc import ABCMeta, abstractmethod\n",
    "\n",
    "class Credentials(metaclass=ABCMeta):\n",
    "    pass\n",
    "    \n",
    "    \n",
    "class SSMPSCredentials(Credentials):\n",
    "    def __init__(self, secretid: str):\n",
    "        self._secretid = secretid\n",
    "        self._secrets = {}\n",
    "        \n",
    "    def get_keys(self):\n",
    "        \"\"\"\n",
    "        credential fetching \n",
    "        \"\"\"\n",
    "        _aws_sm_args = {'service_name': 'secretsmanager', 'region_name': 'us-east-1'}\n",
    "        secrets_client = boto3.client(**_aws_sm_args)\n",
    "        get_secret_value_response = secrets_client.get_secret_value(SecretId=self._secretid)\n",
    "        return get_secret_value_response\n",
    "    \n",
    "    \n",
    "class BaseConnector(metaclass=ABCMeta):\n",
    "    @abstractmethod\n",
    "    def connect(self):\n",
    "        raise NotImplementedError\n",
    "    \n",
    "\n",
    "class SnowflakeConnector(BaseConnector):\n",
    "    def __init__(self, credentials: Credentials):\n",
    "        keys = credentials.get_keys()\n",
    "        self._secrets = json.loads(keys.get('SecretString', \"{}\"))\n",
    "\n",
    "    def connect(self, dbname: str, schema: str = 'DEFAULT'):\n",
    "        ctx = snowflake.connector.connect(\n",
    "            user=self._secrets['login_name'],\n",
    "            password=self._secrets['login_password'],\n",
    "            account=self._secrets['account'],\n",
    "            warehouse=self._secrets['warehouse'],\n",
    "            database=dbname,\n",
    "            schema=schema\n",
    "        )\n",
    "\n",
    "        return ctx\n",
    "    \n",
    "## Credentials\n",
    "SF_CREDS = 'datascience-max-dev-sagemaker-notebooks'\n",
    "\n",
    "## Snowflake connection \n",
    "conn=SnowflakeConnector(SSMPSCredentials(SF_CREDS))\n",
    "ctx=conn.connect(\"MAX_PROD\",\"WORKSPACE\")\n",
    "\n",
    "def run_query(query):\n",
    "    cursor = ctx.cursor()\n",
    "    cursor.execute(query)\n",
    "    df = pd.DataFrame(cursor.fetchall(), columns = [desc[0] for desc in cursor.description])\n",
    "    df.columns= df.columns.str.lower()\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c80d6119",
   "metadata": {},
   "outputs": [],
   "source": [
    "## WRITE OR READ FROM S3 ####\n",
    "import boto3\n",
    "import io\n",
    "\n",
    "s3 = boto3.resource('s3')\n",
    "output_bucket = \"hbo-outbound-datascience-content-dev\"\n",
    "input_bucket = \"hbo-ingest-datascience-content-dev\"\n",
    "bucket = s3.Bucket(output_bucket)\n",
    "\n",
    "def write_to_sf(df, file_name):\n",
    "    csv_buffer = io.StringIO()\n",
    "    df.to_csv(csv_buffer, index = False)\n",
    "    content = csv_buffer.getvalue()\n",
    "    filename = 'title_hours_viewed_retention/{}.csv'.format(file_name)\n",
    "    client = boto3.client('s3')\n",
    "    client.put_object(Bucket=output_bucket, Key=filename, Body=content)\n",
    "    \n",
    "def write_to_input(df, file_name):\n",
    "    csv_buffer = io.StringIO()\n",
    "    df.to_csv(csv_buffer, index = False)\n",
    "    content = csv_buffer.getvalue()\n",
    "    filename = 'title_hours_viewed_retention/{}.csv'.format(file_name)\n",
    "    client = boto3.client('s3')\n",
    "    client.put_object(Bucket=input_bucket, Key=filename, Body=content)\n",
    "    \n",
    "def read_from_s3(filename):\n",
    "    for obj in bucket.objects.filter(Prefix=filename): #churn_metric_0811\n",
    "            key = obj.key \n",
    "            body = obj.get()['Body']\n",
    "            print('Reading {0} features'.format(key))\n",
    "            df = pd.read_csv(body, na_values = [r'\\\\\\\\N'])\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "55777f9a",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b1beb88a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading title_hours_viewed_retention/historcial_and_future_daily_monthly_retention_value_2023-09-28.csv features\n",
      "Reading title_hours_viewed_retention/historcial_and_future_daily_monthly_retention_value_2023-10-30.csv features\n",
      "Reading title_hours_viewed_retention/historcial_and_future_daily_monthly_retention_value_2023-11-13.csv features\n"
     ]
    }
   ],
   "source": [
    "# Read Correlation Results Data\n",
    "filename = 'title_hours_viewed_retention/historcial_and_future_daily_monthly_retention_value_' \n",
    "data_corr = read_from_s3(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7782c47e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_name</th>\n",
       "      <th>title_id</th>\n",
       "      <th>season_number</th>\n",
       "      <th>request_date</th>\n",
       "      <th>days_on_hbo_max</th>\n",
       "      <th>change_in_churn_prediction</th>\n",
       "      <th>name_number</th>\n",
       "      <th>title_number</th>\n",
       "      <th>genre</th>\n",
       "      <th>medal</th>\n",
       "      <th>offering_start_date</th>\n",
       "      <th>churn_per_hr_person</th>\n",
       "      <th>change_in_churn_60d_prediction</th>\n",
       "      <th>asset_run_time_hours</th>\n",
       "      <th>pred_type</th>\n",
       "      <th>date_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Last Week Tonight with John Oliver</td>\n",
       "      <td>GVU2cCgUFTYNJjhsJATuH</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>nan</td>\n",
       "      <td>other</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>15.23</td>\n",
       "      <td>historical</td>\n",
       "      <td>2020-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Last Week Tonight with John Oliver</td>\n",
       "      <td>GVU2cCgUFTYNJjhsJATuH</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2020-05-28</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>nan</td>\n",
       "      <td>other</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>15.23</td>\n",
       "      <td>historical</td>\n",
       "      <td>2020-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Last Week Tonight with John Oliver</td>\n",
       "      <td>GVU2cCgUFTYNJjhsJATuH</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2020-05-29</td>\n",
       "      <td>2</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>nan</td>\n",
       "      <td>other</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>15.23</td>\n",
       "      <td>historical</td>\n",
       "      <td>2020-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Last Week Tonight with John Oliver</td>\n",
       "      <td>GVU2cCgUFTYNJjhsJATuH</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2020-05-30</td>\n",
       "      <td>3</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>nan</td>\n",
       "      <td>other</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>15.23</td>\n",
       "      <td>historical</td>\n",
       "      <td>2020-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Last Week Tonight with John Oliver</td>\n",
       "      <td>GVU2cCgUFTYNJjhsJATuH</td>\n",
       "      <td>7.00</td>\n",
       "      <td>2020-05-31</td>\n",
       "      <td>4</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>nan</td>\n",
       "      <td>other</td>\n",
       "      <td>Bronze</td>\n",
       "      <td>2020-05-27</td>\n",
       "      <td>-0.01</td>\n",
       "      <td>-0.00</td>\n",
       "      <td>15.23</td>\n",
       "      <td>historical</td>\n",
       "      <td>2020-05</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           title_name               title_id  season_number  \\\n",
       "0  Last Week Tonight with John Oliver  GVU2cCgUFTYNJjhsJATuH           7.00   \n",
       "1  Last Week Tonight with John Oliver  GVU2cCgUFTYNJjhsJATuH           7.00   \n",
       "2  Last Week Tonight with John Oliver  GVU2cCgUFTYNJjhsJATuH           7.00   \n",
       "3  Last Week Tonight with John Oliver  GVU2cCgUFTYNJjhsJATuH           7.00   \n",
       "4  Last Week Tonight with John Oliver  GVU2cCgUFTYNJjhsJATuH           7.00   \n",
       "\n",
       "  request_date  days_on_hbo_max  change_in_churn_prediction  name_number  \\\n",
       "0   2020-05-27                0                       -0.00            0   \n",
       "1   2020-05-28                1                       -0.00            0   \n",
       "2   2020-05-29                2                       -0.00            0   \n",
       "3   2020-05-30                3                       -0.00            0   \n",
       "4   2020-05-31                4                       -0.00            0   \n",
       "\n",
       "   title_number  genre   medal offering_start_date  churn_per_hr_person  \\\n",
       "0           nan  other  Bronze          2020-05-27                -0.01   \n",
       "1           nan  other  Bronze          2020-05-27                -0.01   \n",
       "2           nan  other  Bronze          2020-05-27                -0.01   \n",
       "3           nan  other  Bronze          2020-05-27                -0.01   \n",
       "4           nan  other  Bronze          2020-05-27                -0.01   \n",
       "\n",
       "   change_in_churn_60d_prediction  asset_run_time_hours   pred_type date_month  \n",
       "0                           -0.00                 15.23  historical    2020-05  \n",
       "1                           -0.00                 15.23  historical    2020-05  \n",
       "2                           -0.00                 15.23  historical    2020-05  \n",
       "3                           -0.00                 15.23  historical    2020-05  \n",
       "4                           -0.00                 15.23  historical    2020-05  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_corr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3cfbc662",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2030-04'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_corr.date_month.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca457c89",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
